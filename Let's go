Basic Codes:

CODE:var
USING FOR:Create variable and they can changeable.
EXAMPLE:fun main(){ var olgun = 18}

CODE:let
USING FOR:Create variable but they can't change.
EXAMPLE:fun main(){ let olgun = 18}

CODE://
USING FOR:Comment the line you are using.
EXAMPLE://fun main(){ var olgun = 18  
                            print(olgun)  }
This code is not working because double slash is commenting its own line


DATA TYPES:

Byte  ---- 1 byte  ----- [-128 , 127]

Short ---- 2 byte  ----- [-32768 , 32767]

Int  ----- 4 byte  ----- [-2**31 , 2**31 -1]

Long ----- 8 byte ------- [ -2**63  , 2**63 -1]

Double --- 8 byte ------ [float (up to 8 bits)]

Float ---- 4 byte ----- [float (up to 4 byte)]

Char ---- 2 byte ----- [String]

Boolean ---- 1 byte ---- [True or False]



To specify or specify the type of data type

var o:string = olgun

var olgun:Int = 1
        .
        .
        . 
        .



CODE:LENGTH

You can know strings letter length

EXAMPLAE:
fun main(){o = "olgun"
  println(o.length)}


NULL SAFE

fun main(){var olgun = null
print(olgun)}

OUTPUT --------->>>>>>>>> null

fun main(){var olgun:String = null
print(olgun)}

OUTPUT --------->>>>>>> Kotlin: Null can not be a value of a non-null type String


fun main(){var olgun:String? = null
    print(olgun?.length)}


OUTPUT --------->>>>>>> null


fun main(){var olgun:String? = null
    print(olgun.length)}

//If you write like this this variable can be a null
//"?" avoids clutter and avoids problems variables can be null and "!!" this type is dangerous because it can run the code but if the code is wrong all your effort is wasted

OUTPUT --------->>>>>>> Kotlin: Only safe (?.) or non-null asserted (!!.) calls are allowed on a nullable receiver of type String


 // Null check using Elvis operator
    val length = name?.length ?: 0
    println("Name Length: $length")

    // Using unsafe call 
    // Calling without checking if name variable is null
    val upperCaseName = name!!.toUpperCase()
    println("Uppercase Name: $upperCaseName")



ELVÄ°S OPERATOR

 // Null check with Elvis operator.
    val length = name?.length ?: 0
    println("Name Length: $length")

//If name = null , output = 0
// If name = String , outpout = name.length 

















































